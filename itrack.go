// Code generated by ifacemaker; DO NOT EDIT.

package webrtc

import (
	"time"

	"github.com/pion/interceptor"
	"github.com/pion/rtp"
)

// ITrack ...
type ITrack interface {
	// ID is the unique identifier for this Track. This should be unique for the
	// stream, but doesn't have to globally unique. A common example would be 'audio' or 'video'
	// and StreamID would be 'desktop' or 'webcam'
	ID() string
	// RID gets the RTP Stream ID of this Track
	// With Simulcast you will have multiple tracks with the same ID, but different RID values.
	// In many cases a TrackRemote will not have an RID, so it is important to assert it is non-zero
	RID() string
	// PayloadType gets the PayloadType of the track
	PayloadType() PayloadType
	// Kind gets the Kind of the track
	Kind() RTPCodecType
	// StreamID is the group this track belongs too. This must be unique
	StreamID() string
	// SSRC gets the SSRC of the track
	SSRC() SSRC
	// Msid gets the Msid of the track
	Msid() string
	// Codec gets the Codec of the track
	Codec() RTPCodecParameters
	// Read reads data from the track.
	Read(b []byte) (n int, attributes interceptor.Attributes, err error)
	// ReadRTP is a convenience method that wraps Read and unmarshals for you.
	ReadRTP() (*rtp.Packet, interceptor.Attributes, error)
	// SetReadDeadline sets the max amount of time the RTP stream will block before returning. 0 is forever.
	SetReadDeadline(deadline time.Time) error
}
