// Code generated by ifacemaker; DO NOT EDIT.

package webrtc

import (
	"github.com/pion/datachannel"
)

// IDataChannel ...
type IDataChannel interface {
	// Transport returns the SCTPTransport instance the DataChannel is sending over.
	Transport() *SCTPTransport
	// OnOpen sets an event handler which is invoked when
	// the underlying data transport has been established (or re-established).
	OnOpen(f func())
	// OnClose sets an event handler which is invoked when
	// the underlying data transport has been closed.
	OnClose(f func())
	// OnMessage sets an event handler which is invoked on a binary
	// message arrival over the sctp transport from a remote peer.
	// OnMessage can currently receive messages up to 16384 bytes
	// in size. Check out the detach API if you want to use larger
	// message sizes. Note that browser support for larger messages
	// is also limited.
	OnMessage(f func(msg DataChannelMessage))
	// OnError sets an event handler which is invoked when
	// the underlying data transport cannot be read.
	OnError(f func(err error))
	// Send sends the binary message to the DataChannel peer
	Send(data []byte) error
	// SendText sends the text message to the DataChannel peer
	SendText(s string) error
	// Detach allows you to detach the underlying datachannel. This provides
	// an idiomatic API to work with, however it disables the OnMessage callback.
	// Before calling Detach you have to enable this behavior by calling
	// webrtc.DetachDataChannels(). Combining detached and normal data channels
	// is not supported.
	// Please refer to the data-channels-detach example and the
	// pion/datachannel documentation for the correct way to handle the
	// resulting DataChannel object.
	Detach() (datachannel.ReadWriteCloser, error)
	// Close Closes the DataChannel. It may be called regardless of whether
	// the DataChannel object was created by this peer or the remote peer.
	Close() error
	// Label represents a label that can be used to distinguish this
	// DataChannel object from other DataChannel objects. Scripts are
	// allowed to create multiple DataChannel objects with the same label.
	Label() string
	// Ordered returns true if the DataChannel is ordered, and false if
	// out-of-order delivery is allowed.
	Ordered() bool
	// MaxPacketLifeTime represents the length of the time window (msec) during
	// which transmissions and retransmissions may occur in unreliable mode.
	MaxPacketLifeTime() *uint16
	// MaxRetransmits represents the maximum number of retransmissions that are
	// attempted in unreliable mode.
	MaxRetransmits() *uint16
	// Protocol represents the name of the sub-protocol used with this
	// DataChannel.
	Protocol() string
	// Negotiated represents whether this DataChannel was negotiated by the
	// application (true), or not (false).
	Negotiated() bool
	// ID represents the ID for this DataChannel. The value is initially
	// null, which is what will be returned if the ID was not provided at
	// channel creation time, and the DTLS role of the SCTP transport has not
	// yet been negotiated. Otherwise, it will return the ID that was either
	// selected by the script or generated. After the ID is set to a non-null
	// value, it will not change.
	ID() *uint16
	// ReadyState represents the state of the DataChannel object.
	ReadyState() DataChannelState
	// BufferedAmount represents the number of bytes of application data
	// (UTF-8 text and binary data) that have been queued using send(). Even
	// though the data transmission can occur in parallel, the returned value
	// MUST NOT be decreased before the current task yielded back to the event
	// loop to prevent race conditions. The value does not include framing
	// overhead incurred by the protocol, or buffering done by the operating
	// system or network hardware. The value of BufferedAmount slot will only
	// increase with each call to the send() method as long as the ReadyState is
	// open; however, BufferedAmount does not reset to zero once the channel
	// closes.
	BufferedAmount() uint64
	// BufferedAmountLowThreshold represents the threshold at which the
	// bufferedAmount is considered to be low. When the bufferedAmount decreases
	// from above this threshold to equal or below it, the bufferedamountlow
	// event fires. BufferedAmountLowThreshold is initially zero on each new
	// DataChannel, but the application may change its value at any time.
	// The threshold is set to 0 by default.
	BufferedAmountLowThreshold() uint64
	// SetBufferedAmountLowThreshold is used to update the threshold.
	// See BufferedAmountLowThreshold().
	SetBufferedAmountLowThreshold(th uint64)
	// OnBufferedAmountLow sets an event handler which is invoked when
	// the number of bytes of outgoing data becomes lower than the
	// BufferedAmountLowThreshold.
	OnBufferedAmountLow(f func())
}
